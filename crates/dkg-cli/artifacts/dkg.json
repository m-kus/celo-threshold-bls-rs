{"language":"Solidity","sources":{"contracts/DKG.sol":{"content":"// Using the ABIEncoderV2 poses little risk here because we only use it for fetching the byte arrays\n// of shares/responses/justifications\npragma experimental ABIEncoderV2;\npragma solidity ^0.8;\n\ncontract DKG {\n    enum UserState {\n        CannotRegister,\n        CanRegister,\n        Registered\n    }\n\n    /// Mapping of Ethereum Address => UserState for the actions a user can do\n    mapping(address => UserState) public userState;\n\n    /// Mapping of Ethereum Address => BLS public keys\n    mapping(address => bytes) public keys;\n\n    /// Mapping of Ethereum Address => DKG Phase 1 Shares\n    mapping(address => bytes) public shares;\n\n    /// Mapping of Ethereum Address => DKG Phase 2 Responses\n    mapping(address => bytes) public responses;\n\n    /// Mapping of Ethereum Address => DKG Phase 3 Justifications\n    mapping(address => bytes) public justifications;\n\n    /// List of registered Ethereum keys (used for conveniently fetching data)\n    address[] public participants;\n\n    /// The duration of each phase\n    uint256 public immutable PHASE_DURATION;\n\n    /// The threshold of the DKG\n    uint256 public immutable THRESHOLD;\n\n    /// If it's 0 then the DKG is still pending start. If >0, it is the DKG's start block\n    uint256 public startBlock = 0;\n\n    /// The owner of the DKG is the address which can call the `start` function\n    address public owner;\n\n    /// A registered participant is one whose pubkey's length > 0\n    modifier onlyRegistered() {\n        require(userState[msg.sender] == UserState.Registered, \"you are not registered!\");\n        _;\n    }\n\n    /// The DKG starts when startBlock > 0\n    modifier onlyWhenNotStarted() {\n        require(startBlock == 0, \"DKG has already started\");\n        _;\n    }\n\n    constructor(uint256 threshold, uint256 duration) public {\n        PHASE_DURATION = duration;\n        THRESHOLD = threshold;\n        owner = msg.sender;\n    }\n\n    /// Kickoff function which starts the counter\n    function start() external onlyWhenNotStarted {\n        require(msg.sender == owner, \"only owner may start the DKG\");\n        startBlock = block.number;\n    }\n\n    /// The administrator must allowlist an addrss for participation in the DKG\n    function allowlist(address user) external onlyWhenNotStarted {\n        require(msg.sender == owner, \"only owner may allowlist users\");\n\n        require(userState[user] == UserState.CannotRegister, \"user is already allowlisted\");\n        userState[user] = UserState.CanRegister;\n    }\n\n    /// This function ties a DKG participant's on-chain address with their BLS Public Key\n    function register(bytes calldata blsPublicKey) external onlyWhenNotStarted {\n        require(userState[msg.sender] == UserState.CanRegister, \"user is not allowlisted or has already registered\");\n\n        participants.push(msg.sender);\n        keys[msg.sender] = blsPublicKey;\n\n        // the user is now registered\n        userState[msg.sender] = UserState.Registered;\n    }\n\n    /// Participant publishes their data and depending on the phase the data gets inserted\n    /// in the shares, responses or justifications mapping. Reverts if the participant\n    /// has already published their data for a phase or if the DKG has ended.\n    function publish(bytes calldata value) external onlyRegistered {\n        uint256 blocksSinceStart = block.number - startBlock;\n\n        if (blocksSinceStart <= PHASE_DURATION) {\n            require(\n                shares[msg.sender].length == 0,\n                \"you have already published your shares\"\n            );\n            shares[msg.sender] = value;\n        } else if (blocksSinceStart <= 2 * PHASE_DURATION) {\n            require(\n                responses[msg.sender].length == 0,\n                \"you have already published your responses\"\n            );\n            responses[msg.sender] = value;\n        } else if (blocksSinceStart <= 3 * PHASE_DURATION) {\n            require(\n                justifications[msg.sender].length == 0,\n                \"you have already published your justifications\"\n            );\n            justifications[msg.sender] = value;\n        } else {\n            revert(\"DKG has ended\");\n        }\n    }\n\n    // Helpers to fetch data in the mappings. If a participant has registered but not\n    // published their data for a phase, the array element at their index is expected to be 0\n\n    /// Gets the participants' shares\n    function getShares() external view returns (bytes[] memory) {\n        bytes[] memory _shares = new bytes[](participants.length);\n        for (uint256 i = 0; i < participants.length; i++) {\n            _shares[i] = shares[participants[i]];\n        }\n\n        return _shares;\n    }\n\n    /// Gets the participants' responses\n    function getResponses() external view returns (bytes[] memory) {\n        bytes[] memory _responses = new bytes[](participants.length);\n        for (uint256 i = 0; i < participants.length; i++) {\n            _responses[i] = responses[participants[i]];\n        }\n\n        return _responses;\n    }\n\n    /// Gets the participants' justifications\n    function getJustifications() external view returns (bytes[] memory) {\n        bytes[] memory _justifications = new bytes[](participants.length);\n        for (uint256 i = 0; i < participants.length; i++) {\n            _justifications[i] = justifications[participants[i]];\n        }\n\n        return _justifications;\n    }\n\n    /// Gets the participants' ethereum addresses\n    function getParticipants() external view returns (address[] memory) {\n        return participants;\n    }\n\n    /// Gets the participants' BLS keys along with the thershold of the DKG\n    function getBlsKeys() external view returns (uint256, bytes[] memory) {\n        bytes[] memory _keys = new bytes[](participants.length);\n        for (uint256 i = 0; i < participants.length; i++) {\n            _keys[i] = keys[participants[i]];\n        }\n\n        return (THRESHOLD, _keys);\n    }\n\n    /// Returns the current phase of the DKG.\n    function inPhase() public view returns (uint256) {\n        if (startBlock == 0) {\n            return 0;\n        }\n\n        uint256 blocksSinceStart = block.number - startBlock;\n\n        if (blocksSinceStart <= PHASE_DURATION) {\n            return 1;\n        }\n\n        if (blocksSinceStart <= 2 * PHASE_DURATION) {\n            return 2;\n        }\n\n        if (blocksSinceStart <= 3 * PHASE_DURATION) {\n            return 3;\n        }\n\n        revert(\"DKG Ended\");\n    }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers"]}},"evmVersion":"shanghai","libraries":{}}}